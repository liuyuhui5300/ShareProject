<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.manager</groupId>
    <artifactId>manager</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>manager-web</artifactId>
  <packaging>war</packaging>
  
  <dependencies>
  	<dependency>
  		<groupId>com.manager</groupId>
		<artifactId>manager-serviceimpl</artifactId>
		<version>${com.manager.version}</version>
  	</dependency>
  	
  </dependencies>
  
  <profiles>
		<profile>
			<id>dev</id>
			<properties>
				<env>dev</env>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<env>test</env>
			</properties>
		</profile>
		<profile>
			<id>product</id>
			<properties>
				<env>product</env>
			</properties>
		</profile>
	</profiles>
	
	<build>
		<finalName>${env}-${war_name}</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>config/dev/*</exclude>
					<exclude>config/test/*</exclude>
					<exclude>config/pro/*</exclude>
				</excludes>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>
				<!-- validate阶段 复制制定配置文件到输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
					<executions>
						<execution>
							<id>copy-resources</id>
							<!-- 在default生命周期的 validate阶段就执行resources插件的copy-resources目标 -->
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<!-- 把环境资源文件复制到config下 -->
								<outputDirectory>${project.build.outputDirectory}/config</outputDirectory>
								<!-- 待处理的资源定义 -->
								<resources>
									<resource>
										<!-- 指定resources插件处理哪个目录下的资源文件 -->
										<directory>src/main/resources/config/${env}</directory>
										<!-- 是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样， 这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）) -->
										<filtering>false</filtering>
									</resource>
								</resources>
							</configuration>
							<inherited></inherited>
						</execution>
					</executions>
				</plugin>

				<!-- 编译 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
						<source>${java.source.version}</source>
						<target>${java.target.version}</target>
					</configuration>
				</plugin>

				<!-- 开发部署tomcat -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>tomcat-maven-plugin</artifactId>
					<version>1.1</version>
					<configuration>
						<url>http://localhost:8080/manager/text</url>
						<server>tomcat</server>
						<username>admin</username>
						<password>admin</password>
						<path>/${war_name}</path>
						<update>true</update>
					</configuration>
				</plugin>

				<!-- 打包 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
				</plugin>
			</plugins>

		</pluginManagement>

	</build>
</project>